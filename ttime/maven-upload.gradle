apply plugin: 'maven'
apply plugin: 'signing'

ext {
    POM_GROUP_ID            = "com.lxzh123"
    POM_ARTIFACT_ID         = "ttime"                               // sdk 标识 artifactId，可以用project.name或者其他名称
    POM_VERSION_NAME        = VERSION_NAME
    POM_VERSION_CODE        = VERSION_CODE

    POM_NAME                = "TaskTime"
    POM_DESCRIPTION         = "Counting the build time for each task in building."
    POM_URL                 = "https://github.com/lxzh/TaskTime"
    POM_INCEPTION_YEAR      = "2021"
    POM_PACKAGING           = "jar"                                 // sdk 类型(jar/aar)

    POM_SCM_URL             = "https://github.com/lxzh/TaskTime"
    POM_SCM_CONNECTION      = "https://github.com/lxzh/TaskTime.git"
    POM_SCM_DEV_CONNECTION  = "https://github.com/lxzh/TaskTime.git"

    POM_ISSUE_SYSTEM        = "github"
    POM_ISSUE_URL           = "https://github.com/lxzh/TaskTime/issues"

    POM_LICENCE_NAME        = "Apache-2.0"
    POM_LICENCE_URL         = "https://opensource.org/licenses/Apache-2.0"
    POM_LICENCE_DIST        = "repo"

    POM_DEVELOPER_ID        = "lxzh"
    POM_DEVELOPER_NAME      = "lxzh"
    POM_DEVELOPER_EMAIL     = 'leijf1239848066@gmail.com'

    BINTRAY_REPO            = "maven"
    BINTRAY_ORGANIZATION    = "lxzh"
    BINTRAY_LICENCE         = ['Apache-2.0']
    BINTRAY_IS_UPLOADING    = project.getGradle().startParameter.taskNames.any{it.contains('bintrayUpload')}
}

def isReleaseBuild() {
    return POM_VERSION_NAME.contains("SNAPSHOT") == false
}

def getMavenReleaseUrl() {
    return hasProperty('MAVEN_RELEASE_URL') ? MAVEN_RELEASE_URL
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getMavenSnapshotUrl() {
    return hasProperty('MAVEN_SNAPSHOT_URL') ? MAVEN_SNAPSHOT_URL
            : "https://oss.sonatype.org/content/repositories/snapshots/"
}

afterEvaluate { project ->
    uploadArchives {
        Properties properties   = new Properties()
        properties.load(project.rootProject.file('local.properties').newInputStream())
        def userName            = properties.getProperty('maven.user')
        def password            = properties.getProperty('maven.password')
        def snapshotUrl         = getMavenSnapshotUrl()
        def deployUrl           = getMavenReleaseUrl()

        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                pom.groupId     = POM_GROUP_ID
                pom.artifactId  = POM_ARTIFACT_ID
                pom.version     = POM_VERSION_NAME

                repository(url: deployUrl) {
                    authentication(userName: userName, password: password)
                }
                snapshotRepository(url: snapshotUrl) {
                    authentication(userName: userName, password: password)
                }
//                repository(url: localMavenRepo)
//                repository(url: uri('../repo')) //deploy到本地仓库

                pom.project {
                    name                    POM_ARTIFACT_ID
                    packaging               POM_PACKAGING
                    description             POM_DESCRIPTION
                    url                     POM_URL

                    scm {
                        url                 POM_SCM_URL
                        connection          POM_SCM_CONNECTION
                        developerConnection POM_SCM_DEV_CONNECTION
                    }

                    licenses {
                        license {
                            name            POM_LICENCE_NAME
                            url             POM_LICENCE_URL
                            distribution    POM_LICENCE_DIST
                        }
                    }

                    developers {
                        developer {
                            id              POM_DEVELOPER_ID
                            name            POM_DEVELOPER_NAME
                        }
                    }
                }
            }
        }
    }

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    // java library
    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    task sourcesJar(type: Jar) {
        from project.file('src/main/groovy/com/Main.groovy')
//    from sourceSets.main.allSource
        classifier = 'sources'
    }

    // android library
//    task androidJavadocs(type: Javadoc) {
//        source = android.sourceSets.main.java.srcDirs
//        classpath += project.files(android.getBootClasspath() .join(File.pathSeparator))
//    }
//
//    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
//        classifier = 'javadoc'
//        from androidJavadocs.destinationDir
//    }
//
//    task androidSourcesJar(type: Jar) {
//        classifier = 'sources'
//        from project.file('src/main/java/com/sources')
//    }

    artifacts {
        archives javadocJar, sourcesJar
//        archives androidSourcesJar, androidJavadocsJar
    }
}